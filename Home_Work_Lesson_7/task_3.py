"""
3. Реализовать программу работы с органическими клетками, состоящими из ячеек.
Необходимо создать класс Клетка. В его конструкторе инициализировать параметр,
соответствующий количеству ячеек клетки (целое число). В классе должны быть
реализованы методы перегрузки арифметических операторов: сложение (__add__()),
вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()). Данные
методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
умножение и целочисленное (с округлением до целого) деление клеток,
соответственно.
Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно
равняться сумме ячеек исходных двух клеток.
Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если
разность количества ячеек двух клеток больше нуля, иначе выводить
соответствующее сообщение.
Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки определяется
как произведение количества ячеек этих двух клеток.
Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется
как целочисленное деление количества ячеек этих двух клеток.
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса
и количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек
между \n равно переданному аргументу. Если ячеек на формирование ряда не хватает,
то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
Тогда метод make_order() вернёт строку: *****\n*****\n**.
Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда
метод make_order() вернёт строку: *****\n*****\n*****.
Подсказка: подробный список операторов для перегрузки доступен по ссылке.
"""


class Cell:
    def __init__(self, cell_count):
        self.cell_count = cell_count

    def __add__(self, other):
        ''' Сложение '''
        try:
            if self.cell_count == 0 or other.cell_count == 0:
                return "Клетки не должны быть нулями"
            else:
                return Cell(self.cell_count + other.cell_count)
        except TypeError:
            return "Вводите только целое положительное число"

    def __sub__(self, other):
        ''' Вычитание '''
        try:
            if self.cell_count == 0 or other.cell_count == 0:
                return "Клетки не должны быть нулями"
            elif self.cell_count < other.cell_count:
                return "Вторая клетка не должны быть больше первой"
            else:
                return Cell(self.cell_count - other.cell_count)
        except TypeError:
            return "Вводите только целое положительное число"

    def __mul__(self, other):
        ''' Умножение '''
        try:
            if self.cell_count == 0 or other.cell_count == 0:
                return "Клетки не должны быть нулями"
            else:
                return Cell(self.cell_count * other.cell_count)
        except TypeError:
            return "Вводите только целое положительное число"

    def __truediv__(self, other):
        ''' Деление '''
        try:
            if self.cell_count < other.cell_count:
                return "Вторая клетка не может быть больше первой"
            else:
                return Cell(self.cell_count // other.cell_count)
        except ZeroDivisionError:
            return "Клетка не должна быть нулем"
        except:
            return "Вводите только целое положительное число"

    def __str__(self):
        return str(self.cell_count)

    def make_order(self, score):
        try:
            for i in range(self.cell_count // score):
                print("*" * score)
            print("*" * (self.cell_count % score))
        except ZeroDivisionError:
            return print("Клетка не должна быть нулем")
        except:
            return print("Вводите только целое положительное число")


cell_1 = Cell(42)
cell_2 = Cell(10)

print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_1 * cell_2)
print(cell_1 / cell_2)

cell_1.make_order(5)
